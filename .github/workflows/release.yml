name: Release Management

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      release_notes:
        description: 'Release notes'
        required: false
        type: string

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: |
          npm ci
          cd client && npm ci
          cd ../server && npm ci

      - name: Run tests
        run: |
          echo "🧪 Running all tests..."
          cd client && npm test --if-present --watchAll=false
          cd ../server && npm test --if-present

      - name: Build frontend
        run: |
          echo "🏗️ Building frontend..."
          cd client && npm run build

      - name: Verify build artifacts
        run: |
          echo "✅ Verifying build artifacts..."
          test -d client/build || (echo "❌ Frontend build failed" && exit 1)
          test -f client/build/index.html || (echo "❌ Frontend index.html missing" && exit 1)

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: validate-release
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20.x'

      - name: Install dependencies and build
        run: |
          npm ci
          cd client && npm ci && npm run build
          cd ../server && npm ci

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.release_notes }}" ]; then
            echo "changelog=${{ github.event.inputs.release_notes }}" >> $GITHUB_OUTPUT
          else
            # Generate changelog from commits
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD 2>/dev/null || git log --pretty=format:"- %s (%h)" --max-count=10)
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGELOG" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create release archive
        run: |
          echo "📦 Creating release archive..."
          
          # Create release directory
          mkdir -p release/placemento-${{ steps.version.outputs.version }}
          
          # Copy source code (excluding node_modules, build artifacts, etc.)
          rsync -av --exclude='node_modules' --exclude='.git' --exclude='client/build' --exclude='*.log' . release/placemento-${{ steps.version.outputs.version }}/
          
          # Copy built frontend
          mkdir -p release/placemento-${{ steps.version.outputs.version }}/client/build
          cp -r client/build/* release/placemento-${{ steps.version.outputs.version }}/client/build/
          
          # Create tarball
          cd release
          tar -czf placemento-${{ steps.version.outputs.version }}.tar.gz placemento-${{ steps.version.outputs.version }}
          zip -r placemento-${{ steps.version.outputs.version }}.zip placemento-${{ steps.version.outputs.version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Placemento ${{ steps.version.outputs.version }}
          body: |
            ## 🎉 Placemento ${{ steps.version.outputs.version }}

            ### 📋 Release Notes
            ${{ steps.changelog.outputs.changelog }}

            ### 📦 Installation
            
            #### Option 1: Download and Extract
            1. Download the source code archive below
            2. Extract to your desired location
            3. Follow the setup instructions in README.md

            #### Option 2: Git Clone
            ```bash
            git clone https://github.com/MCA-NITW/placemento.git
            cd placemento
            git checkout ${{ steps.version.outputs.version }}
            ```

            ### 🚀 Quick Start
            ```bash
            # Install dependencies
            npm run install-deps

            # Start development server
            npm run dev

            # Or build for production
            npm run build
            ```

            ### 📚 Documentation
            - [README.md](https://github.com/MCA-NITW/placemento/blob/main/README.md)
            - [Backend Documentation](https://github.com/MCA-NITW/placemento/blob/main/server/README.md)
            - [Security Policy](https://github.com/MCA-NITW/placemento/blob/main/SECURITY.md)
            - [Contributing Guide](https://github.com/MCA-NITW/placemento/blob/main/CONTRIBUTING.md)

            ### 🔍 What's Included
            - ✅ Complete React.js frontend with modern UI
            - ✅ Node.js/Express.js backend with MongoDB
            - ✅ Authentication and authorization system
            - ✅ Company and student management
            - ✅ Experience sharing platform
            - ✅ Advanced statistics and analytics
            - ✅ Email notification system

            ---
            **Full Changelog**: https://github.com/MCA-NITW/placemento/compare/v1.0.0...${{ steps.version.outputs.version }}
          files: |
            release/placemento-${{ steps.version.outputs.version }}.tar.gz
            release/placemento-${{ steps.version.outputs.version }}.zip
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: create-release
    if: success()

    steps:
      - name: Get version from previous job
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Notify teams
        run: |
          echo "🎉 Successfully created release ${{ steps.get_version.outputs.version }}"
          echo "📧 Add your notification logic here (Slack, Discord, Email, etc.)"
          # Example notifications:
          # - Send Slack message to development channel
          # - Send email to stakeholders
          # - Update project management tools
          # - Trigger deployment to production environment
